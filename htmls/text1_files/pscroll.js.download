(function($) {
	$.Pscroll = function(element, options) {
		this._init(element, options);
	};
	$.Pscroll.defaultOptions = {
		window: window,
		currentPage: 1,
		maxPage: 15,
		offset: 1000,
		url: location.href,
		params: {},
		onLoadingBegin: function() {},
		onLoadingEnd: function() {},
		onComplete: function() {},
		debug: false
	};
	$.Pscroll.prototype = {
		_init: function(element, options) {
			this.options = $.extend(true, {}, $.Pscroll.defaultOptions, options);
			this.$window = $(window);
			this.$container = $(element);
			this.isLoading = false;
			this.isDestroyed = false;
			this.page = this.options.currentPage;
			setTimeout($.proxy(this._bindEvent, this));
		},
		_complete: function() {
			this._unbindEvent();
			this.options.onComplete();
		},
		_bindEvent: function() {
			this.$window.on('scroll.pscroll resize.pscroll', $.proxy(this._onScroll, this))
			.trigger('scroll.pscroll');
		},
		_unbindEvent: function() {
			this.$window.off('.pscroll');
		},
		_getOffset: function() {
			var offset = $(document).height() - this.$window.scrollTop() - this.$window.height();
			this._debug("Pscroll._getOffset: " + offset);
			return offset;
		},
		_onScroll: function() {
			if (this.isLoading || this.isDestroyed || this._getOffset() > this.options.offset) {
				return;
			}
			this.isLoading = true;
			this.page++;
			this.options.onLoadingBegin();
			var params = $.extend({}, this.options.params, { page: this.page });
			this._debug("Pscroll._onScroll url: " + this.options.url);
			this._debug(params);
			$.get(this.options.url, params, $.proxy(function(data) {
				if (!this.isDestroyed) {
					this.$container.append(data);
					this.isLoading = false;
					this.options.onLoadingEnd();
					if (this.page >= this.options.maxPage) this._complete();
				}
			}, this), 'html');
		},
		_debug: function(msg) {
			this.options.debug && window.console && window.console.log(msg);
		},
		option: function(key, val) {
			if (typeof val !== 'undefined') {
				this.options[key] = val;
			}
			return this.options[key];
		},
		destroy: function() {
			this._debug("Pscroll.destroy");
			this._unbindEvent();
			this.isDestroyed = true;
		},
		initialized: function() {
			return true;
		}
	};
	$.fn.pscroll = function(options) {
		if (typeof options === 'string') {
			var args = Array.prototype.slice.call(arguments, 1);
			var ret = null;
			this.each(function(){
				var instance = $.data(this, 'pscroll');
				if (!instance) {
					//window.console && window.console.error('!instance');
					return false;
				}
				if (!$.isFunction(instance[options]) || options.charAt(0) === "_") {
					//window.console && window.console.error('!isFunction');
					return false;
				}
				ret = instance[options].apply(instance, args);
			});
			return ret;
		} else {
			this.each(function() {
				var instance = $.data(this, 'pscroll');
				if (instance) {
					// already instantiated
					return;
				}
				$.data(this, 'pscroll', new $.Pscroll(this, options));
			});
			return this;
		}
	};
})(jQuery);
